-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module SAI.Query exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)
import SAI.Enum.Status
import SAI.InputObject
import SAI.Interface
import SAI.Object
import SAI.Scalar
import SAI.ScalarCodecs
import SAI.Union


type alias PeoplepaginatedOptionalArguments =
    { aftercursor : OptionalArgument String }


type alias PeoplepaginatedRequiredArguments =
    { npeople : SAI.ScalarCodecs.Long
    , status : SAI.Enum.Status.Status
    }


{-|

  - aftercursor -
  - npeople -
  - status -

-}
peoplepaginated : (PeoplepaginatedOptionalArguments -> PeoplepaginatedOptionalArguments) -> PeoplepaginatedRequiredArguments -> SelectionSet decodesTo SAI.Object.PersonConnection -> SelectionSet decodesTo RootQuery
peoplepaginated fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { aftercursor = Absent }

        optionalArgs =
            [ Argument.optional "aftercursor" filledInOptionals.aftercursor Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "peoplepaginated" (optionalArgs ++ [ Argument.required "npeople" requiredArgs.npeople (SAI.ScalarCodecs.codecs |> SAI.Scalar.unwrapEncoder .codecLong), Argument.required "status" requiredArgs.status (Encode.enum SAI.Enum.Status.toString) ]) object_ identity


type alias PeoplebystatusRequiredArguments =
    { status : SAI.Enum.Status.Status }


{-|

  - status -

-}
peoplebystatus : PeoplebystatusRequiredArguments -> SelectionSet decodesTo SAI.Object.Person -> SelectionSet (List decodesTo) RootQuery
peoplebystatus requiredArgs object_ =
    Object.selectionForCompositeField "peoplebystatus" [ Argument.required "status" requiredArgs.status (Encode.enum SAI.Enum.Status.toString) ] object_ (identity >> Decode.list)


{-| -}
people : SelectionSet decodesTo SAI.Object.Person -> SelectionSet (List decodesTo) RootQuery
people object_ =
    Object.selectionForCompositeField "people" [] object_ (identity >> Decode.list)


type alias PersonRequiredArguments =
    { id : SAI.ScalarCodecs.Id }


{-|

  - id -

-}
person : PersonRequiredArguments -> SelectionSet decodesTo SAI.Object.Person -> SelectionSet (Maybe decodesTo) RootQuery
person requiredArgs object_ =
    Object.selectionForCompositeField "person" [ Argument.required "id" requiredArgs.id (SAI.ScalarCodecs.codecs |> SAI.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


{-| -}
groups : SelectionSet decodesTo SAI.Object.Group -> SelectionSet (List decodesTo) RootQuery
groups object_ =
    Object.selectionForCompositeField "groups" [] object_ (identity >> Decode.list)


type alias GroupRequiredArguments =
    { id : SAI.ScalarCodecs.Id }


{-|

  - id -

-}
group : GroupRequiredArguments -> SelectionSet decodesTo SAI.Object.Group -> SelectionSet (Maybe decodesTo) RootQuery
group requiredArgs object_ =
    Object.selectionForCompositeField "group" [ Argument.required "id" requiredArgs.id (SAI.ScalarCodecs.codecs |> SAI.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


{-| -}
users : SelectionSet decodesTo SAI.Object.User -> SelectionSet (List decodesTo) RootQuery
users object_ =
    Object.selectionForCompositeField "users" [] object_ (identity >> Decode.list)


type alias UserRequiredArguments =
    { id : SAI.ScalarCodecs.Id }


{-|

  - id -

-}
user : UserRequiredArguments -> SelectionSet decodesTo SAI.Object.User -> SelectionSet (Maybe decodesTo) RootQuery
user requiredArgs object_ =
    Object.selectionForCompositeField "user" [ Argument.required "id" requiredArgs.id (SAI.ScalarCodecs.codecs |> SAI.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)


type alias LoginRequiredArguments =
    { username : String
    , password : String
    }


{-|

  - username -
  - password -

-}
login : LoginRequiredArguments -> SelectionSet decodesTo SAI.Object.LoginResult -> SelectionSet decodesTo RootQuery
login requiredArgs object_ =
    Object.selectionForCompositeField "login" [ Argument.required "username" requiredArgs.username Encode.string, Argument.required "password" requiredArgs.password Encode.string ] object_ identity
