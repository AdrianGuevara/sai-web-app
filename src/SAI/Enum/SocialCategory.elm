-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module SAI.Enum.SocialCategory exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Baby -
  - Kid -
  - Teen -
  - Young -
  - Adult -
  - Senior -

-}
type SocialCategory
    = Baby
    | Kid
    | Teen
    | Young
    | Adult
    | Senior


list : List SocialCategory
list =
    [ Baby, Kid, Teen, Young, Adult, Senior ]


decoder : Decoder SocialCategory
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "BABY" ->
                        Decode.succeed Baby

                    "KID" ->
                        Decode.succeed Kid

                    "TEEN" ->
                        Decode.succeed Teen

                    "YOUNG" ->
                        Decode.succeed Young

                    "ADULT" ->
                        Decode.succeed Adult

                    "SENIOR" ->
                        Decode.succeed Senior

                    _ ->
                        Decode.fail ("Invalid SocialCategory type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : SocialCategory -> String
toString enum =
    case enum of
        Baby ->
            "BABY"

        Kid ->
            "KID"

        Teen ->
            "TEEN"

        Young ->
            "YOUNG"

        Adult ->
            "ADULT"

        Senior ->
            "SENIOR"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SocialCategory
fromString enumString =
    case enumString of
        "BABY" ->
            Just Baby

        "KID" ->
            Just Kid

        "TEEN" ->
            Just Teen

        "YOUNG" ->
            Just Young

        "ADULT" ->
            Just Adult

        "SENIOR" ->
            Just Senior

        _ ->
            Nothing
