-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module SAI.Enum.DayOfWeek exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Monday -
  - Tuesday -
  - Wednesday -
  - Thursday -
  - Friday -
  - Saturday -
  - Sunday -

-}
type DayOfWeek
    = Monday
    | Tuesday
    | Wednesday
    | Thursday
    | Friday
    | Saturday
    | Sunday


list : List DayOfWeek
list =
    [ Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday ]


decoder : Decoder DayOfWeek
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "MONDAY" ->
                        Decode.succeed Monday

                    "TUESDAY" ->
                        Decode.succeed Tuesday

                    "WEDNESDAY" ->
                        Decode.succeed Wednesday

                    "THURSDAY" ->
                        Decode.succeed Thursday

                    "FRIDAY" ->
                        Decode.succeed Friday

                    "SATURDAY" ->
                        Decode.succeed Saturday

                    "SUNDAY" ->
                        Decode.succeed Sunday

                    _ ->
                        Decode.fail ("Invalid DayOfWeek type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : DayOfWeek -> String
toString enum =
    case enum of
        Monday ->
            "MONDAY"

        Tuesday ->
            "TUESDAY"

        Wednesday ->
            "WEDNESDAY"

        Thursday ->
            "THURSDAY"

        Friday ->
            "FRIDAY"

        Saturday ->
            "SATURDAY"

        Sunday ->
            "SUNDAY"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe DayOfWeek
fromString enumString =
    case enumString of
        "MONDAY" ->
            Just Monday

        "TUESDAY" ->
            Just Tuesday

        "WEDNESDAY" ->
            Just Wednesday

        "THURSDAY" ->
            Just Thursday

        "FRIDAY" ->
            Just Friday

        "SATURDAY" ->
            Just Saturday

        "SUNDAY" ->
            Just Sunday

        _ ->
            Nothing
