-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module SAI.Enum.CivilState exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - Single -
  - Married -
  - Committed -
  - FreeUnion -
  - Widower -
  - Divorced -
  - Separated -

-}
type CivilState
    = Single
    | Married
    | Committed
    | FreeUnion
    | Widower
    | Divorced
    | Separated


list : List CivilState
list =
    [ Single, Married, Committed, FreeUnion, Widower, Divorced, Separated ]


decoder : Decoder CivilState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "SINGLE" ->
                        Decode.succeed Single

                    "MARRIED" ->
                        Decode.succeed Married

                    "COMMITTED" ->
                        Decode.succeed Committed

                    "FREE_UNION" ->
                        Decode.succeed FreeUnion

                    "WIDOWER" ->
                        Decode.succeed Widower

                    "DIVORCED" ->
                        Decode.succeed Divorced

                    "SEPARATED" ->
                        Decode.succeed Separated

                    _ ->
                        Decode.fail ("Invalid CivilState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : CivilState -> String
toString enum =
    case enum of
        Single ->
            "SINGLE"

        Married ->
            "MARRIED"

        Committed ->
            "COMMITTED"

        FreeUnion ->
            "FREE_UNION"

        Widower ->
            "WIDOWER"

        Divorced ->
            "DIVORCED"

        Separated ->
            "SEPARATED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CivilState
fromString enumString =
    case enumString of
        "SINGLE" ->
            Just Single

        "MARRIED" ->
            Just Married

        "COMMITTED" ->
            Just Committed

        "FREE_UNION" ->
            Just FreeUnion

        "WIDOWER" ->
            Just Widower

        "DIVORCED" ->
            Just Divorced

        "SEPARATED" ->
            Just Separated

        _ ->
            Nothing
