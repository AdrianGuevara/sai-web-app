-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module SAI.Enum.EventStatus exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-|

  - OnCourse -
  - Comming -
  - Passed -

-}
type EventStatus
    = OnCourse
    | Comming
    | Passed


list : List EventStatus
list =
    [ OnCourse, Comming, Passed ]


decoder : Decoder EventStatus
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ON_COURSE" ->
                        Decode.succeed OnCourse

                    "COMMING" ->
                        Decode.succeed Comming

                    "PASSED" ->
                        Decode.succeed Passed

                    _ ->
                        Decode.fail ("Invalid EventStatus type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : EventStatus -> String
toString enum =
    case enum of
        OnCourse ->
            "ON_COURSE"

        Comming ->
            "COMMING"

        Passed ->
            "PASSED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe EventStatus
fromString enumString =
    case enumString of
        "ON_COURSE" ->
            Just OnCourse

        "COMMING" ->
            Just Comming

        "PASSED" ->
            Just Passed

        _ ->
            Nothing
