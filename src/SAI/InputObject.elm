-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module SAI.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import SAI.Enum.CivilState
import SAI.Enum.Frecuency
import SAI.Enum.Gender
import SAI.Enum.LevelAccess
import SAI.Enum.Status
import SAI.Interface
import SAI.Object
import SAI.Scalar
import SAI.ScalarCodecs
import SAI.Union


buildCreateDate : CreateDateRequiredFields -> CreateDate
buildCreateDate required =
    { day = required.day, month = required.month, year = required.year }


type alias CreateDateRequiredFields =
    { day : Int
    , month : Int
    , year : Int
    }


{-| Type for the CreateDate input object.
-}
type alias CreateDate =
    { day : Int
    , month : Int
    , year : Int
    }


{-| Encode a CreateDate into a value that can be used as an argument.
-}
encodeCreateDate : CreateDate -> Value
encodeCreateDate input =
    Encode.maybeObject
        [ ( "day", Encode.int input.day |> Just ), ( "month", Encode.int input.month |> Just ), ( "year", Encode.int input.year |> Just ) ]


buildCreateGroupInput : CreateGroupInputRequiredFields -> (CreateGroupInputOptionalFields -> CreateGroupInputOptionalFields) -> CreateGroupInput
buildCreateGroupInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { members = Absent, status = Absent }
    in
    { name = required.name, members = optionals.members, image = required.image, status = optionals.status }


type alias CreateGroupInputRequiredFields =
    { name : String
    , image : String
    }


type alias CreateGroupInputOptionalFields =
    { members : OptionalArgument (List (Maybe String))
    , status : OptionalArgument SAI.Enum.Status.Status
    }


{-| Type for the CreateGroupInput input object.
-}
type alias CreateGroupInput =
    { name : String
    , members : OptionalArgument (List (Maybe String))
    , image : String
    , status : OptionalArgument SAI.Enum.Status.Status
    }


{-| Encode a CreateGroupInput into a value that can be used as an argument.
-}
encodeCreateGroupInput : CreateGroupInput -> Value
encodeCreateGroupInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "members", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.members ), ( "image", Encode.string input.image |> Just ), ( "status", Encode.enum SAI.Enum.Status.toString |> Encode.optional input.status ) ]


buildCreatePersonInput : CreatePersonInputRequiredFields -> (CreatePersonInputOptionalFields -> CreatePersonInputOptionalFields) -> CreatePersonInput
buildCreatePersonInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { image = Absent }
    in
    { name = required.name, lastName = required.lastName, email = required.email, address = required.address, phone = required.phone, civilState = required.civilState, gender = required.gender, birthday = required.birthday, image = optionals.image, account = required.account }


type alias CreatePersonInputRequiredFields =
    { name : String
    , lastName : String
    , email : String
    , address : String
    , phone : String
    , civilState : SAI.Enum.CivilState.CivilState
    , gender : SAI.Enum.Gender.Gender
    , birthday : CreateDate
    , account : Bool
    }


type alias CreatePersonInputOptionalFields =
    { image : OptionalArgument String }


{-| Type for the CreatePersonInput input object.
-}
type alias CreatePersonInput =
    { name : String
    , lastName : String
    , email : String
    , address : String
    , phone : String
    , civilState : SAI.Enum.CivilState.CivilState
    , gender : SAI.Enum.Gender.Gender
    , birthday : CreateDate
    , image : OptionalArgument String
    , account : Bool
    }


{-| Encode a CreatePersonInput into a value that can be used as an argument.
-}
encodeCreatePersonInput : CreatePersonInput -> Value
encodeCreatePersonInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "lastName", Encode.string input.lastName |> Just ), ( "email", Encode.string input.email |> Just ), ( "address", Encode.string input.address |> Just ), ( "phone", Encode.string input.phone |> Just ), ( "civilState", Encode.enum SAI.Enum.CivilState.toString input.civilState |> Just ), ( "gender", Encode.enum SAI.Enum.Gender.toString input.gender |> Just ), ( "birthday", encodeCreateDate input.birthday |> Just ), ( "image", Encode.string |> Encode.optional input.image ), ( "account", Encode.bool input.account |> Just ) ]


buildCreateTime : CreateTimeRequiredFields -> CreateTime
buildCreateTime required =
    { hour = required.hour, minutes = required.minutes, seconds = required.seconds }


type alias CreateTimeRequiredFields =
    { hour : Int
    , minutes : Int
    , seconds : Int
    }


{-| Type for the CreateTime input object.
-}
type alias CreateTime =
    { hour : Int
    , minutes : Int
    , seconds : Int
    }


{-| Encode a CreateTime into a value that can be used as an argument.
-}
encodeCreateTime : CreateTime -> Value
encodeCreateTime input =
    Encode.maybeObject
        [ ( "hour", Encode.int input.hour |> Just ), ( "minutes", Encode.int input.minutes |> Just ), ( "seconds", Encode.int input.seconds |> Just ) ]


buildEventInput : EventInputRequiredFields -> (EventInputOptionalFields -> EventInputOptionalFields) -> EventInput
buildEventInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { assistants = Absent }
    in
    { name = required.name, startdate = required.startdate, enddate = required.enddate, starttime = required.starttime, endtime = required.endtime, groups = required.groups, frecuency = required.frecuency, repetitions = required.repetitions, assistants = optionals.assistants }


type alias EventInputRequiredFields =
    { name : String
    , startdate : CreateDate
    , enddate : CreateDate
    , starttime : CreateTime
    , endtime : CreateTime
    , groups : List (Maybe String)
    , frecuency : SAI.Enum.Frecuency.Frecuency
    , repetitions : Int
    }


type alias EventInputOptionalFields =
    { assistants : OptionalArgument (List (Maybe String)) }


{-| Type for the EventInput input object.
-}
type alias EventInput =
    { name : String
    , startdate : CreateDate
    , enddate : CreateDate
    , starttime : CreateTime
    , endtime : CreateTime
    , groups : List (Maybe String)
    , frecuency : SAI.Enum.Frecuency.Frecuency
    , repetitions : Int
    , assistants : OptionalArgument (List (Maybe String))
    }


{-| Encode a EventInput into a value that can be used as an argument.
-}
encodeEventInput : EventInput -> Value
encodeEventInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "startdate", encodeCreateDate input.startdate |> Just ), ( "enddate", encodeCreateDate input.enddate |> Just ), ( "starttime", encodeCreateTime input.starttime |> Just ), ( "endtime", encodeCreateTime input.endtime |> Just ), ( "groups", (Encode.string |> Encode.maybe |> Encode.list) input.groups |> Just ), ( "frecuency", Encode.enum SAI.Enum.Frecuency.toString input.frecuency |> Just ), ( "repetitions", Encode.int input.repetitions |> Just ), ( "assistants", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.assistants ) ]


buildUpdateEventInput : (UpdateEventInputOptionalFields -> UpdateEventInputOptionalFields) -> UpdateEventInput
buildUpdateEventInput fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, startdate = Absent, enddate = Absent, starttime = Absent, endtime = Absent, groups = Absent, frecuency = Absent, repetitions = Absent, assistants = Absent }
    in
    { name = optionals.name, startdate = optionals.startdate, enddate = optionals.enddate, starttime = optionals.starttime, endtime = optionals.endtime, groups = optionals.groups, frecuency = optionals.frecuency, repetitions = optionals.repetitions, assistants = optionals.assistants }


type alias UpdateEventInputOptionalFields =
    { name : OptionalArgument String
    , startdate : OptionalArgument CreateDate
    , enddate : OptionalArgument CreateDate
    , starttime : OptionalArgument CreateTime
    , endtime : OptionalArgument CreateTime
    , groups : OptionalArgument (List (Maybe String))
    , frecuency : OptionalArgument SAI.Enum.Frecuency.Frecuency
    , repetitions : OptionalArgument Int
    , assistants : OptionalArgument (List (Maybe String))
    }


{-| Type for the UpdateEventInput input object.
-}
type alias UpdateEventInput =
    { name : OptionalArgument String
    , startdate : OptionalArgument CreateDate
    , enddate : OptionalArgument CreateDate
    , starttime : OptionalArgument CreateTime
    , endtime : OptionalArgument CreateTime
    , groups : OptionalArgument (List (Maybe String))
    , frecuency : OptionalArgument SAI.Enum.Frecuency.Frecuency
    , repetitions : OptionalArgument Int
    , assistants : OptionalArgument (List (Maybe String))
    }


{-| Encode a UpdateEventInput into a value that can be used as an argument.
-}
encodeUpdateEventInput : UpdateEventInput -> Value
encodeUpdateEventInput input =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input.name ), ( "startdate", encodeCreateDate |> Encode.optional input.startdate ), ( "enddate", encodeCreateDate |> Encode.optional input.enddate ), ( "starttime", encodeCreateTime |> Encode.optional input.starttime ), ( "endtime", encodeCreateTime |> Encode.optional input.endtime ), ( "groups", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.groups ), ( "frecuency", Encode.enum SAI.Enum.Frecuency.toString |> Encode.optional input.frecuency ), ( "repetitions", Encode.int |> Encode.optional input.repetitions ), ( "assistants", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.assistants ) ]


buildUpdateGroupInput : (UpdateGroupInputOptionalFields -> UpdateGroupInputOptionalFields) -> UpdateGroupInput
buildUpdateGroupInput fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, members = Absent, image = Absent }
    in
    { name = optionals.name, members = optionals.members, image = optionals.image }


type alias UpdateGroupInputOptionalFields =
    { name : OptionalArgument String
    , members : OptionalArgument (List (Maybe String))
    , image : OptionalArgument String
    }


{-| Type for the UpdateGroupInput input object.
-}
type alias UpdateGroupInput =
    { name : OptionalArgument String
    , members : OptionalArgument (List (Maybe String))
    , image : OptionalArgument String
    }


{-| Encode a UpdateGroupInput into a value that can be used as an argument.
-}
encodeUpdateGroupInput : UpdateGroupInput -> Value
encodeUpdateGroupInput input =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input.name ), ( "members", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.members ), ( "image", Encode.string |> Encode.optional input.image ) ]


buildUpdatePersonInput : (UpdatePersonInputOptionalFields -> UpdatePersonInputOptionalFields) -> UpdatePersonInput
buildUpdatePersonInput fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, lastName = Absent, email = Absent, address = Absent, phone = Absent, civilState = Absent, gender = Absent, birthday = Absent, image = Absent }
    in
    { name = optionals.name, lastName = optionals.lastName, email = optionals.email, address = optionals.address, phone = optionals.phone, civilState = optionals.civilState, gender = optionals.gender, birthday = optionals.birthday, image = optionals.image }


type alias UpdatePersonInputOptionalFields =
    { name : OptionalArgument String
    , lastName : OptionalArgument String
    , email : OptionalArgument String
    , address : OptionalArgument String
    , phone : OptionalArgument String
    , civilState : OptionalArgument SAI.Enum.CivilState.CivilState
    , gender : OptionalArgument SAI.Enum.Gender.Gender
    , birthday : OptionalArgument CreateDate
    , image : OptionalArgument String
    }


{-| Type for the UpdatePersonInput input object.
-}
type alias UpdatePersonInput =
    { name : OptionalArgument String
    , lastName : OptionalArgument String
    , email : OptionalArgument String
    , address : OptionalArgument String
    , phone : OptionalArgument String
    , civilState : OptionalArgument SAI.Enum.CivilState.CivilState
    , gender : OptionalArgument SAI.Enum.Gender.Gender
    , birthday : OptionalArgument CreateDate
    , image : OptionalArgument String
    }


{-| Encode a UpdatePersonInput into a value that can be used as an argument.
-}
encodeUpdatePersonInput : UpdatePersonInput -> Value
encodeUpdatePersonInput input =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input.name ), ( "lastName", Encode.string |> Encode.optional input.lastName ), ( "email", Encode.string |> Encode.optional input.email ), ( "address", Encode.string |> Encode.optional input.address ), ( "phone", Encode.string |> Encode.optional input.phone ), ( "civilState", Encode.enum SAI.Enum.CivilState.toString |> Encode.optional input.civilState ), ( "gender", Encode.enum SAI.Enum.Gender.toString |> Encode.optional input.gender ), ( "birthday", encodeCreateDate |> Encode.optional input.birthday ), ( "image", Encode.string |> Encode.optional input.image ) ]


buildUpdateUserInput : UpdateUserInputRequiredFields -> (UpdateUserInputOptionalFields -> UpdateUserInputOptionalFields) -> UpdateUserInput
buildUpdateUserInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { groups = Absent }
    in
    { username = required.username, password = required.password, levelaccess = required.levelaccess, groups = optionals.groups }


type alias UpdateUserInputRequiredFields =
    { username : String
    , password : String
    , levelaccess : SAI.Enum.LevelAccess.LevelAccess
    }


type alias UpdateUserInputOptionalFields =
    { groups : OptionalArgument (List (Maybe String)) }


{-| Type for the UpdateUserInput input object.
-}
type alias UpdateUserInput =
    { username : String
    , password : String
    , levelaccess : SAI.Enum.LevelAccess.LevelAccess
    , groups : OptionalArgument (List (Maybe String))
    }


{-| Encode a UpdateUserInput into a value that can be used as an argument.
-}
encodeUpdateUserInput : UpdateUserInput -> Value
encodeUpdateUserInput input =
    Encode.maybeObject
        [ ( "username", Encode.string input.username |> Just ), ( "password", Encode.string input.password |> Just ), ( "levelaccess", Encode.enum SAI.Enum.LevelAccess.toString input.levelaccess |> Just ), ( "groups", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.groups ) ]
