-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module SAI.InputObject exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import SAI.Enum.CivilState
import SAI.Enum.CommitmentLevel
import SAI.Enum.Gender
import SAI.Enum.SocialCategory
import SAI.Enum.Status
import SAI.Interface
import SAI.Object
import SAI.Scalar
import SAI.ScalarCodecs
import SAI.Union


buildCreateArticleInput : CreateArticleInputRequiredFields -> CreateArticleInput
buildCreateArticleInput required =
    { title = required.title, text = required.text, authorId = required.authorId }


type alias CreateArticleInputRequiredFields =
    { title : String
    , text : String
    , authorId : String
    }


{-| Type for the CreateArticleInput input object.
-}
type alias CreateArticleInput =
    { title : String
    , text : String
    , authorId : String
    }


{-| Encode a CreateArticleInput into a value that can be used as an argument.
-}
encodeCreateArticleInput : CreateArticleInput -> Value
encodeCreateArticleInput input =
    Encode.maybeObject
        [ ( "title", Encode.string input.title |> Just ), ( "text", Encode.string input.text |> Just ), ( "authorId", Encode.string input.authorId |> Just ) ]


buildCreateCommentInput : CreateCommentInputRequiredFields -> CreateCommentInput
buildCreateCommentInput required =
    { text = required.text, authorId = required.authorId, articleId = required.articleId }


type alias CreateCommentInputRequiredFields =
    { text : String
    , authorId : String
    , articleId : String
    }


{-| Type for the CreateCommentInput input object.
-}
type alias CreateCommentInput =
    { text : String
    , authorId : String
    , articleId : String
    }


{-| Encode a CreateCommentInput into a value that can be used as an argument.
-}
encodeCreateCommentInput : CreateCommentInput -> Value
encodeCreateCommentInput input =
    Encode.maybeObject
        [ ( "text", Encode.string input.text |> Just ), ( "authorId", Encode.string input.authorId |> Just ), ( "articleId", Encode.string input.articleId |> Just ) ]


buildCreateGroupInput : CreateGroupInputRequiredFields -> (CreateGroupInputOptionalFields -> CreateGroupInputOptionalFields) -> CreateGroupInput
buildCreateGroupInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { members = Absent, status = Absent }
    in
    { name = required.name, members = optionals.members, status = optionals.status }


type alias CreateGroupInputRequiredFields =
    { name : String }


type alias CreateGroupInputOptionalFields =
    { members : OptionalArgument (List (Maybe String))
    , status : OptionalArgument SAI.Enum.Status.Status
    }


{-| Type for the CreateGroupInput input object.
-}
type alias CreateGroupInput =
    { name : String
    , members : OptionalArgument (List (Maybe String))
    , status : OptionalArgument SAI.Enum.Status.Status
    }


{-| Encode a CreateGroupInput into a value that can be used as an argument.
-}
encodeCreateGroupInput : CreateGroupInput -> Value
encodeCreateGroupInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "members", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.members ), ( "status", Encode.enum SAI.Enum.Status.toString |> Encode.optional input.status ) ]


buildCreatePersonInput : CreatePersonInputRequiredFields -> (CreatePersonInputOptionalFields -> CreatePersonInputOptionalFields) -> CreatePersonInput
buildCreatePersonInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { phone = Absent, socialCategory = Absent, age = Absent, status = Absent }
    in
    { name = required.name, lastName = required.lastName, fullName = required.fullName, email = required.email, address = required.address, phone = optionals.phone, baptized = required.baptized, socialCategory = optionals.socialCategory, civilState = required.civilState, gender = required.gender, birthday = required.birthday, age = optionals.age, commitmentLevel = required.commitmentLevel, church = required.church, status = optionals.status }


type alias CreatePersonInputRequiredFields =
    { name : String
    , lastName : String
    , fullName : String
    , email : String
    , address : String
    , baptized : String
    , civilState : SAI.Enum.CivilState.CivilState
    , gender : SAI.Enum.Gender.Gender
    , birthday : String
    , commitmentLevel : SAI.Enum.CommitmentLevel.CommitmentLevel
    , church : String
    }


type alias CreatePersonInputOptionalFields =
    { phone : OptionalArgument String
    , socialCategory : OptionalArgument SAI.Enum.SocialCategory.SocialCategory
    , age : OptionalArgument Int
    , status : OptionalArgument SAI.Enum.Status.Status
    }


{-| Type for the CreatePersonInput input object.
-}
type alias CreatePersonInput =
    { name : String
    , lastName : String
    , fullName : String
    , email : String
    , address : String
    , phone : OptionalArgument String
    , baptized : String
    , socialCategory : OptionalArgument SAI.Enum.SocialCategory.SocialCategory
    , civilState : SAI.Enum.CivilState.CivilState
    , gender : SAI.Enum.Gender.Gender
    , birthday : String
    , age : OptionalArgument Int
    , commitmentLevel : SAI.Enum.CommitmentLevel.CommitmentLevel
    , church : String
    , status : OptionalArgument SAI.Enum.Status.Status
    }


{-| Encode a CreatePersonInput into a value that can be used as an argument.
-}
encodeCreatePersonInput : CreatePersonInput -> Value
encodeCreatePersonInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "lastName", Encode.string input.lastName |> Just ), ( "fullName", Encode.string input.fullName |> Just ), ( "email", Encode.string input.email |> Just ), ( "address", Encode.string input.address |> Just ), ( "phone", Encode.string |> Encode.optional input.phone ), ( "baptized", Encode.string input.baptized |> Just ), ( "socialCategory", Encode.enum SAI.Enum.SocialCategory.toString |> Encode.optional input.socialCategory ), ( "civilState", Encode.enum SAI.Enum.CivilState.toString input.civilState |> Just ), ( "gender", Encode.enum SAI.Enum.Gender.toString input.gender |> Just ), ( "birthday", Encode.string input.birthday |> Just ), ( "age", Encode.int |> Encode.optional input.age ), ( "commitmentLevel", Encode.enum SAI.Enum.CommitmentLevel.toString input.commitmentLevel |> Just ), ( "church", Encode.string input.church |> Just ), ( "status", Encode.enum SAI.Enum.Status.toString |> Encode.optional input.status ) ]


buildCreateProfileInput : CreateProfileInputRequiredFields -> (CreateProfileInputOptionalFields -> CreateProfileInputOptionalFields) -> CreateProfileInput
buildCreateProfileInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { bio = Absent }
    in
    { username = required.username, bio = optionals.bio }


type alias CreateProfileInputRequiredFields =
    { username : String }


type alias CreateProfileInputOptionalFields =
    { bio : OptionalArgument String }


{-| Type for the CreateProfileInput input object.
-}
type alias CreateProfileInput =
    { username : String
    , bio : OptionalArgument String
    }


{-| Encode a CreateProfileInput into a value that can be used as an argument.
-}
encodeCreateProfileInput : CreateProfileInput -> Value
encodeCreateProfileInput input =
    Encode.maybeObject
        [ ( "username", Encode.string input.username |> Just ), ( "bio", Encode.string |> Encode.optional input.bio ) ]


buildUpdateArticleInput : UpdateArticleInputRequiredFields -> UpdateArticleInput
buildUpdateArticleInput required =
    { id = required.id, title = required.title, text = required.text }


type alias UpdateArticleInputRequiredFields =
    { id : String
    , title : String
    , text : String
    }


{-| Type for the UpdateArticleInput input object.
-}
type alias UpdateArticleInput =
    { id : String
    , title : String
    , text : String
    }


{-| Encode a UpdateArticleInput into a value that can be used as an argument.
-}
encodeUpdateArticleInput : UpdateArticleInput -> Value
encodeUpdateArticleInput input =
    Encode.maybeObject
        [ ( "id", Encode.string input.id |> Just ), ( "title", Encode.string input.title |> Just ), ( "text", Encode.string input.text |> Just ) ]


buildUpdateGroupInput : UpdateGroupInputRequiredFields -> (UpdateGroupInputOptionalFields -> UpdateGroupInputOptionalFields) -> UpdateGroupInput
buildUpdateGroupInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { members = Absent }
    in
    { id = required.id, name = required.name, members = optionals.members }


type alias UpdateGroupInputRequiredFields =
    { id : SAI.ScalarCodecs.Id
    , name : String
    }


type alias UpdateGroupInputOptionalFields =
    { members : OptionalArgument (List (Maybe String)) }


{-| Type for the UpdateGroupInput input object.
-}
type alias UpdateGroupInput =
    { id : SAI.ScalarCodecs.Id
    , name : String
    , members : OptionalArgument (List (Maybe String))
    }


{-| Encode a UpdateGroupInput into a value that can be used as an argument.
-}
encodeUpdateGroupInput : UpdateGroupInput -> Value
encodeUpdateGroupInput input =
    Encode.maybeObject
        [ ( "id", (SAI.ScalarCodecs.codecs |> SAI.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "name", Encode.string input.name |> Just ), ( "members", (Encode.string |> Encode.maybe |> Encode.list) |> Encode.optional input.members ) ]


buildUpdatePersonInput : UpdatePersonInputRequiredFields -> (UpdatePersonInputOptionalFields -> UpdatePersonInputOptionalFields) -> UpdatePersonInput
buildUpdatePersonInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { name = Absent, lastName = Absent, fullName = Absent, email = Absent, address = Absent, phone = Absent, baptized = Absent, socialCategory = Absent, civilState = Absent, gender = Absent, birthday = Absent, age = Absent, commitmentLevel = Absent, church = Absent, status = Absent }
    in
    { id = required.id, name = optionals.name, lastName = optionals.lastName, fullName = optionals.fullName, email = optionals.email, address = optionals.address, phone = optionals.phone, baptized = optionals.baptized, socialCategory = optionals.socialCategory, civilState = optionals.civilState, gender = optionals.gender, birthday = optionals.birthday, age = optionals.age, commitmentLevel = optionals.commitmentLevel, church = optionals.church, status = optionals.status }


type alias UpdatePersonInputRequiredFields =
    { id : SAI.ScalarCodecs.Id }


type alias UpdatePersonInputOptionalFields =
    { name : OptionalArgument String
    , lastName : OptionalArgument String
    , fullName : OptionalArgument String
    , email : OptionalArgument String
    , address : OptionalArgument String
    , phone : OptionalArgument String
    , baptized : OptionalArgument String
    , socialCategory : OptionalArgument SAI.Enum.SocialCategory.SocialCategory
    , civilState : OptionalArgument SAI.Enum.CivilState.CivilState
    , gender : OptionalArgument SAI.Enum.Gender.Gender
    , birthday : OptionalArgument String
    , age : OptionalArgument Int
    , commitmentLevel : OptionalArgument SAI.Enum.CommitmentLevel.CommitmentLevel
    , church : OptionalArgument String
    , status : OptionalArgument SAI.Enum.Status.Status
    }


{-| Type for the UpdatePersonInput input object.
-}
type alias UpdatePersonInput =
    { id : SAI.ScalarCodecs.Id
    , name : OptionalArgument String
    , lastName : OptionalArgument String
    , fullName : OptionalArgument String
    , email : OptionalArgument String
    , address : OptionalArgument String
    , phone : OptionalArgument String
    , baptized : OptionalArgument String
    , socialCategory : OptionalArgument SAI.Enum.SocialCategory.SocialCategory
    , civilState : OptionalArgument SAI.Enum.CivilState.CivilState
    , gender : OptionalArgument SAI.Enum.Gender.Gender
    , birthday : OptionalArgument String
    , age : OptionalArgument Int
    , commitmentLevel : OptionalArgument SAI.Enum.CommitmentLevel.CommitmentLevel
    , church : OptionalArgument String
    , status : OptionalArgument SAI.Enum.Status.Status
    }


{-| Encode a UpdatePersonInput into a value that can be used as an argument.
-}
encodeUpdatePersonInput : UpdatePersonInput -> Value
encodeUpdatePersonInput input =
    Encode.maybeObject
        [ ( "id", (SAI.ScalarCodecs.codecs |> SAI.Scalar.unwrapEncoder .codecId) input.id |> Just ), ( "name", Encode.string |> Encode.optional input.name ), ( "lastName", Encode.string |> Encode.optional input.lastName ), ( "fullName", Encode.string |> Encode.optional input.fullName ), ( "email", Encode.string |> Encode.optional input.email ), ( "address", Encode.string |> Encode.optional input.address ), ( "phone", Encode.string |> Encode.optional input.phone ), ( "baptized", Encode.string |> Encode.optional input.baptized ), ( "socialCategory", Encode.enum SAI.Enum.SocialCategory.toString |> Encode.optional input.socialCategory ), ( "civilState", Encode.enum SAI.Enum.CivilState.toString |> Encode.optional input.civilState ), ( "gender", Encode.enum SAI.Enum.Gender.toString |> Encode.optional input.gender ), ( "birthday", Encode.string |> Encode.optional input.birthday ), ( "age", Encode.int |> Encode.optional input.age ), ( "commitmentLevel", Encode.enum SAI.Enum.CommitmentLevel.toString |> Encode.optional input.commitmentLevel ), ( "church", Encode.string |> Encode.optional input.church ), ( "status", Encode.enum SAI.Enum.Status.toString |> Encode.optional input.status ) ]


buildUpdateProfileInput : UpdateProfileInputRequiredFields -> (UpdateProfileInputOptionalFields -> UpdateProfileInputOptionalFields) -> UpdateProfileInput
buildUpdateProfileInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { bio = Absent }
    in
    { id = required.id, bio = optionals.bio }


type alias UpdateProfileInputRequiredFields =
    { id : String }


type alias UpdateProfileInputOptionalFields =
    { bio : OptionalArgument String }


{-| Type for the UpdateProfileInput input object.
-}
type alias UpdateProfileInput =
    { id : String
    , bio : OptionalArgument String
    }


{-| Encode a UpdateProfileInput into a value that can be used as an argument.
-}
encodeUpdateProfileInput : UpdateProfileInput -> Value
encodeUpdateProfileInput input =
    Encode.maybeObject
        [ ( "id", Encode.string input.id |> Just ), ( "bio", Encode.string |> Encode.optional input.bio ) ]
